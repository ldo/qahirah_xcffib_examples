#!/usr/bin/python3
#+
# qahirah_xcffib example: bare-bones window plus minimal event handling.
#
# Copyright 2022 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import asyncio
import xcffib
from xcffib import \
    xproto
import qahirah as qah
from qahirah import \
    Colour, \
    Vector, \
    Rect
import qahirah_xcffib as qah_xcb
from qahirah_xcffib import \
    WINATTR

conn = qah_xcb.Connection.open()

async def mainline() :

    done = conn.loop.create_future()

    def handle_configure_notify(this_window, evt) :
        # synchronize dimensions of drawing surface with those of window
        window_dims = Vector(evt.width, evt.height)
        #sys.stderr.write("ConfigureNotify, evt = %d, new window size = %s\n" % (evt.response_type, window_dims))
        window.user_data["surface"].set_size(window_dims)
        window.user_data["surface_dims"] = window_dims
    #end handle_configure_notify

    def handle_expose(window, evt) :
        # actually draw the window contents
        ctx = window.user_data["ctx"]
        dimensions = window.user_data["surface_dims"]
        (ctx
            .set_source
              (
                qah.Pattern.create_linear
                  (
                    p0 = (0, dimensions.y),
                    p1 = (0, 0),
                    colour_stops =
                        (
                            (0, Colour.from_hsva((0.15, 0.5, 0.3))),
                            (0.25, Colour.from_hsva((0.15, 0.5, 0.5))),
                            (1, Colour.from_hsva((0.5, 0.5, 1))),
                        )
                  )
              )
            .paint()
        )
        window.user_data["surface"].flush()
    #end handle_expose

    def handle_conn_error(window, evt) :
        # terminate mainline when connection goes down (e.g. window is closed)
        if isinstance(evt, xcffib.ConnectionException) :
            #sys.stderr.write("conn error %s" % repr(evt))
            done.set_result(None)
        #end if
    #end handle_conn_error

#begin mainline
    window_dims = Vector(500, 200)
    window = qah_xcb.Window.create \
      (
        conn = conn,
        depth = xcffib.XCB_COPY_FROM_PARENT,
        parent = conn.root_window(0),
        bounds = Rect.from_dimensions(window_dims) + Vector(200, 200),
        border_width = 0,
        window_class = xproto.WindowClass.InputOutput,
        visual = conn.conn.setup.roots[conn.conn.pref_screen].root_visual,
        set_attrs =
            (
                (WINATTR.EVENTMASK,
                        xproto.EventMask.Exposure
                    |
                        xproto.EventMask.StructureNotify
                ),
            )
      )
    surface = window.create_surface(conn.conn.pref_screen, window_dims)
    ctx = qah.Context.create(surface)
    window.user_data["surface"] = surface
    window.user_data["surface_dims"] = window_dims
    window.user_data["ctx"] = ctx
    window.set_name("Not much to see here")
    for evt, handler in \
        (
            (qah_xcb.X.ConfigureNotify, handle_configure_notify),
            (qah_xcb.X.Expose, handle_expose),
        ) \
    :
        window.add_event_filter(handler, selevents = {evt})
    #end for
    window.add_event_filter(handle_conn_error)
    window.set_mapped(True)
    await done
#end mainline

conn.loop.run_until_complete(mainline())
